# -*- coding: utf-8 -*-

from datetime import datetime
from typing import Optional
from aiogram.utils.formatting import Text, Bold, Italic, Code
from aiogram.utils.formatting import as_list, as_numbered_section, as_key_value
from const.text import cmd, msg
from const.formats import date_fmt


# Register new user: begin
def reg_main() -> Text:
    return as_list(
        Bold("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        "",
        as_numbered_section(
            "–ù—É–∂–Ω–æ –±—É–¥–µ—Ç:",
            "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ—ë –∏–º—è",
        ),
        "",
        "–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏—Ö –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.",
        "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º?",
    )


# Register new user: begin edit
def reg_main_edit() -> Text:
    return as_list(
        Bold("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        "",
        as_numbered_section(
            "–ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å:",
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–æ–Ω –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç)",
            "–°–≤–æ—ë –∏–º—è (–±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)",
        ),
        "",
        msg["cancel"],
    )


# Register new user: ask phone
def reg_phone() -> Text:
    return as_list(
        Bold("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
        "",
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º!",
        "–ù–∞–¥–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
        "",
        Bold("–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"),
    )


# Register new user: ask name
def reg_name(currentName: Optional[str]) -> Text:
    res = as_list(
        Bold("–í–≤–µ–¥–∏—Ç–µ –∏–º—è"),
        "–≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        as_key_value("–¢–µ–∫—É—â–µ–µ –∏–º—è", currentName) if currentName else "",
        msg["skip"],
    )
    return res


# Register new user: end
def reg_end() -> Text:
    return as_list("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", "", "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")


# Abonement: info
def ab_info(
    name: str,
    description: Optional[str],
    expiry_date: Optional[datetime],
    total_visits: int,
    visits_count: int,
    my_visits_count: int,
    notify: Optional[str],
) -> Text:
    days = expiry_date.date() - datetime.now().date() if expiry_date else None
    days_left = days.days + 1 if days is not None else None
    days_left_str = ""
    if days_left is not None:
        if days_left > 1:
            days_left_str = f"–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {days_left}"
        elif days_left == 1:
            days_left_str = "–°–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å"
        else:
            days_left_str = "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π"
    res = as_list(
        "–í—ã–±—Ä–∞–Ω –∞–±–æ–Ω–µ–º–µ–Ω—Ç",
        Bold(name),
        *[Italic(description), ""] if description else [""],
        (
            f"–î–æ {expiry_date.strftime(date_fmt)}"
            if expiry_date
            else Text(msg["ab_expiry_date_label"], " ", msg["ab_unlim"])
        ),
        *([days_left_str, ""] if days_left_str else [""]),
        (
            f"–ù–∞ {total_visits} –ø–æ—Å–µ—â–µ–Ω–∏–π"
            if total_visits != 0
            else Text(msg["ab_visits_label"], " ", msg["ab_unlim"])
        ),
        as_key_value("–°–æ–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ö–æ–¥–æ–≤", visits_count),
        as_key_value("–ò–∑ –Ω–∏—Ö –º–æ–∏ –ø—Ä–æ—Ö–æ–¥—ã", my_visits_count),
        *(
            [
                as_key_value(
                    msg["ab_left_visits"],
                    total_visits - visits_count,
                ),
                "",
            ]
            if total_visits != 0
            else [""]
        ),
        msg["notify_on"] if notify and notify == "all" else msg["notify_off"],
    )
    return res


# Abonement: page with visits
def ab_page(offset: int, total: int, visits: int) -> Text:
    res = (
        Text(
            "üìà –ü—Ä–æ—Ö–æ–¥—ã —Å ",
            Bold(offset + 1),
            " –ø–æ ",
            Bold(offset + visits),
            " –∏–∑ ",
            Bold(total),
        )
        if total > 0
        else Text("‚ú® –ü—Ä–æ—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ.")
    )
    return res


# Abonement Visit: ask to delete or unlink
def ab_del_visit_ask() -> Text:
    res = as_list(
        Text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ", Bold(cmd["txt_yes"]), " —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ"),
        "",
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è",
    )
    return res


# Abonement: ask to delete or unlink
def ab_del_ask(user_is_owner: bool, name: str) -> Text:
    res = as_list(
        ("üóë –£–¥–∞–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞" if user_is_owner else "‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞"),
        as_key_value(msg["name"], name),
        "",
        Text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ",
            Bold(cmd["txt_yes"]),
            " –≤ –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ ",
            (Bold("—É–¥–∞–ª–∏—Ç—å") if user_is_owner else Bold("–æ—Ç–∫–ª—é—á–∏—Ç—å")),
            " –µ–≥–æ",
        ),
        "",
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞",
    )
    return res


# Abonement: delete or unlink result
def ab_del(
    operation: Optional[str], result: bool, abonement_key: Optional[str]
) -> Text:
    res = as_list(
        Text(
            "–ê–±–æ–Ω–µ–º–µ–Ω—Ç",
            Bold(" –Ω–µ") if not result else "",
            " —É–¥–∞–ª–µ–Ω" if operation and operation == "delete" else " –æ—Ç–∫–ª—é—á–µ–Ω",
        ),
        "",
        as_key_value(
            "–ö–ª—é—á",
            Code(abonement_key) if abonement_key else Italic("–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"),
        ),
    )
    return res
